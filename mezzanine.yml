- name: Deploy mezzanine
  hosts: web

  vars:
    user: "{{ ansible_user }}"
    proj_app: mezzanine_example
    proj_name: "{{ proj_app }}"
    venv_home: "{{ ansible_env.HOME }}/.virtualenvs"
    venv_path: "{{ venv_home }}/{{ proj_name }}"
    proj_path: "{{ ansible_env.HOME }}/mezzanine/{{ proj_name }}"
    settings_path: "{{ proj_path }}/{{ proj_name }}"
    reqs_path: requirements.txt
    manage: "{{ python }} {{ proj_path }}/manage.py"
    live_hostname: 192.168.33.10.xip.io
    domains:
      - 192.168.33.10.xip.io
      - www.192.168.33.10.xip.io
    repo_url: git@github.com:ansiblebook/mezzanine_example.git
    locale: en_US.UTF-8
    conf_path: /etc/nginx/conf
    tls_enable: True
    python: "{{ venv_path }}/bin/python"
    database_name: "{{ proj_name }}"
    database_user: "{{ proj_name }}"
    database_host: localhost
    databse_port: 5432
    gunicorn_procname: gunicorn_mezzanine
    num_workers: "multiprocessing.cpu_count() * 2 + 1"
  vars_files:
    - secrets.yml
tasks :
  - name: install apt packages
    apt: pkg={{ item }} update_cache=yes cache_valid_time=3600
    become: True
    with_items:
      - git
      - libjpeg-dev
      - libpq-dev
      - memcached
      - nginx
      - postgresql
      - python-dev
      - python-pip
      - python-psycopg2
      - python-setuptools
      - python-virtualenv
      - supervisor

  - name: create project path
    file: path={{ proj_path }} state=directory
  - name: create a logs dir
    file:
      path: "{{ ansible_env.HOME }}/logs"
      state: directory
  - name: check out the repository on the host
    git: repo={{ repo_url }} dest={{ proj_path }} accept_hostkey=yes

  - name: install Python reqs via pip
    pip: name={{ item }} state=latest
    with_items:
        - pip
        - virtualenv
        - virtualenvwrapper
    become: True
  - name: create project locale
    locale_gen: name={{ locale }}
    become: True

  - name: create a DB user
    postgresql_user:
      name: "{{ database_user}}"
      password: "{{ db_pass }}"
    become: True
    become_user: postgres

  - name: create the database
    postgresql_db:
      name: "{{ database_name }}"
      owner: "{{ database_user }}"
      encoding: UTF8
      lc_ctype: "{{ locale }}"
      lc_collate: "{{ locale }}"
      template: template0
    become: True
    become_user: postgres

  - name: ensure config path exists
    file: path={{ conf_path }} state=directory
    sudo: True
    when: tls_enabled

  - name: create tls certs
    command: >
      openssl req -new -x509 -nodes -out {{ proj_name }}.crt
      -keyout {{ proj_name }}.key -subj '/CN={{ domains[0] }}' -days 3650
      chdir={{ conf_path }}
      creates={{ conf_path }}/{{ proj_name }}.crt
    sudo: True
    when: tls_enabled
    notify: restart nginx

  - name: remove the default nginx file
    file: pat=/etc/nginx/sites-enabled/default state=absent
    notify: restart nginx
    become: True

  - name: set the nginx conf file
    template:
      src: template/nginx.conf.j2
      dest: /etc/nginx/sites-available/mezzanine.conf
    notify: restart nginx
    become: True

  - name: enable the nginx config file
    file:
      src: /etc/nginx/sites-available/mezzanine.conf
      dest: /etc/nginx/sites-enabled/mezzanine.conf
      state: link
    become: True
    
  - name: set the site id
    script: scripts/setsite.py
    environment: 
      PATH: "{{ venv_path }}/bin"
      PROJECT_DIR: "{{ proj_path }}"
      PROJECT_APP: "{{ proj_app }}"
      WEBSITE_DOMAIN: "{{ live_hostname }}"

  - name: set the admin password
    script: scripts/setadmin.py
    environment: 
      PATH: "{{ venv_path }}/bin"
      PROJECT_DIR: "{{ proj_path }}"
      PROJECT_APP: "{{ proj_app }}"
      WEBSITE_DOMAIN: "{{ live_hostname }}"

  - name: set the gunicorn file
    template:
      src: templates/gunicorn.conf.py.j2
      dest: "{{ proj_path }}"/guincorn.conf.py

  - name: set the supervisor.conf.j2
    template:
      src: templates/supervisor.conf.j2
    become: True
    notify: restart supervisor



handlers:
  - name: restart supervisor
  supervisorctl: name=gunicorn_mezzanine state=restarted
  sudo: True

  - name: restart nginx
  service: name=nginx state=restarted
  sudo: True



